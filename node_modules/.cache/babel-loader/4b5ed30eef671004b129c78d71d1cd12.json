{"ast":null,"code":"var _jsxFileName = \"/home/itselios/Desktop/Smart_Contract_app/client/src/App.js\";\nimport React, { Component, useEffect } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      highestBid: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      owner: null,\n      highestBidder: null,\n      tempValue: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = AuctionContract.networks[networkId];\n        const instance = new web3.eth.Contract(AuctionContract.abi, deployedNetwork && deployedNetwork.address);\n        const ela = instance.methods.constructor.call();\n        const highestBidInit = instance.methods.highestBid.call();\n        const highestBidderInit = instance.methods.highestBidder.call();\n        const ownerInit = instance.methods.owner.call();\n        await this.setState({\n          highestBid: highestBidInit\n        });\n        await this.setState({\n          highestBidder: highestBidderInit\n        });\n        await this.setState({\n          owner: ownerInit\n        }); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.OwnerMethod);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.OwnerMethod = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            owner = _this$state.owner;\n      this.setState({\n        owner: accounts\n      });\n    };\n\n    this.submitBid = event => {\n      const _this$state2 = this.state,\n            highestBid = _this$state2.highestBid,\n            tempValue = _this$state2.tempValue,\n            contract = _this$state2.contract,\n            accounts = _this$state2.accounts;\n\n      if (highestBid < tempValue) {\n        this.setState({\n          highestBid: Number(tempValue)\n        });\n      }\n\n      contract.methods.bid().send({\n        from: accounts[0]\n      });\n      event.preventDefault();\n    };\n\n    this.BidHandler = event => {\n      this.setState({\n        tempValue: event.target.value\n      });\n    };\n\n    this.submitWithdraw = event => {\n      alert(\"asd\");\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Owner: \"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Highest bid: \"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Highest bidder address: \"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Contract value: \"), React.createElement(\"div\", {\n      className: \"Bid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitBid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.BidHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"withdraw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitWithdraw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/itselios/Desktop/Smart_Contract_app/client/src/App.js"],"names":["React","Component","useEffect","AuctionContract","getWeb3","App","state","highestBid","web3","accounts","contract","owner","highestBidder","tempValue","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","ela","methods","constructor","call","highestBidInit","highestBidderInit","ownerInit","setState","OwnerMethod","error","alert","console","submitBid","event","Number","bid","send","from","preventDefault","BidHandler","target","value","submitWithdraw","render"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n    state = { highestBid: 0, web3: null, accounts: null, contract: null, owner: null, highestBidder: null, tempValue: 0};\n\n    componentDidMount = async () => {\n        try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = AuctionContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n            AuctionContract.abi,\n            deployedNetwork && deployedNetwork.address,\n        );\n        \n        const ela = instance.methods.constructor.call();\n        const highestBidInit = instance.methods.highestBid.call();\n        const highestBidderInit = instance.methods.highestBidder.call();\n        const ownerInit = instance.methods.owner.call();\n        \n        await this.setState({highestBid: highestBidInit});\n        await this.setState({highestBidder: highestBidderInit});\n        await this.setState({owner: ownerInit});\n        \n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        this.setState({ web3, accounts, contract: instance }, this.OwnerMethod);\n        } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n            `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n        }\n    };\n    \n\n    OwnerMethod = async () => {\n        const { accounts, owner } = this.state;\n        this.setState({ owner: accounts });\n    };\n    \n    submitBid = (event) => {\n        const {highestBid, tempValue, contract, accounts} = this.state;\n        if(highestBid < tempValue){\n            this.setState({highestBid: Number(tempValue)});\n        }\n        contract.methods.bid().send({from: accounts[0]});\n        event.preventDefault();\n    }\n    \n    BidHandler = (event) => {\n        this.setState({tempValue: event.target.value});\n    }\n    \n    submitWithdraw = (event) => {\n        alert(\"asd\");\n    }\n\n    render() {\n        if (!this.state.web3) {\n        return <div>Loading Web3, accounts, and contract...</div>;\n        }\n        return (\n            <div className=\"App\">\n                <h1>Owner: </h1>\n                <h2>Highest bid: </h2>\n                <h3>Highest bidder address: </h3>\n                <h4>Contract value: </h4>\n                <div className=\"Bid\">\n                    <form onSubmit={this.submitBid}>\n                        <input\n                            type='text'\n                            onChange={this.BidHandler}\n                        />\n                        <input type='submit'/>\n                    </form>\n                </div>\n                <div className=\"withdraw\">\n                    <form onSubmit={this.submitWithdraw}>\n                        <input type='submit'/>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}