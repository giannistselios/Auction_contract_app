{"ast":null,"code":"var _jsxFileName = \"/home/itselios/Desktop/Smart_Contract_app/client/src/App.js\";\nimport React, { Component, useEffect } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      highestBid: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      owner: null,\n      highestBidder: null,\n      tempValue: 0,\n      contract_value: 0\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = AuctionContract.networks[networkId];\n        const instance = new web3.eth.Contract(AuctionContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.submitBid = async event => {\n      const _this$state = this.state,\n            highestBid = _this$state.highestBid,\n            tempValue = _this$state.tempValue,\n            contract = _this$state.contract,\n            accounts = _this$state.accounts,\n            contract_value = _this$state.contract_value;\n      await contract.methods.bid().send({\n        from: accounts[0],\n        value: tempValue\n      });\n      const temp = await contract.methods.highestBid.call();\n      this.setState({\n        highestBid: temp\n      });\n      this.state.contract_value += this.state.temp_value;\n      this.setState({\n        contract_value: temp_value\n      });\n      event.preventDefault();\n    };\n\n    this.HighestBidInit = async () => {\n      const contract = this.state.contract;\n      const result = await contract.methods.highestBid().call();\n      this.setState({\n        highestBid: result\n      });\n    };\n\n    this.HighestBidderInit = async () => {\n      const contract = this.state.contract;\n      const result = await contract.methods.highestBidder().call();\n      this.setState({\n        highestBidder: result\n      });\n    };\n\n    this.ownerInit = async () => {\n      const contract = this.state.contract;\n      const result = await contract.methods.owner().call();\n      this.setState({\n        owner: result\n      });\n    };\n\n    this.contractValueInit = async () => {\n      const _this$state2 = this.state,\n            owner = _this$state2.owner,\n            web3 = _this$state2.web3;\n      const value = await web3.eth.getBalance(owner);\n      this.setState({\n        contract_value: value\n      });\n    };\n\n    this.BidHandler = event => {\n      this.setState({\n        tempValue: event.target.value\n      });\n    };\n\n    this.submitWithdraw = async event => {\n      const _this$state3 = this.state,\n            accounts = _this$state3.accounts,\n            contract = _this$state3.contract;\n      await contract.methods.withdraw().send({\n        from: accounts[0]\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"listOfButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.ownerInit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Owner\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.owner)), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.HighestBidInit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Highest Bid\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.highestBid)), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.HighestBidderInit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Highest bidder address\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.highestBidder)), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.contractValueInit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Contract value\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.contract_value))), React.createElement(\"div\", {\n      className: \"Bid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitBid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.BidHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"btn\",\n      type: \"submit\",\n      value: \"BID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"withdraw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitWithdraw,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"btn\",\n      type: \"submit\",\n      value: \"WITHDRAW\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/itselios/Desktop/Smart_Contract_app/client/src/App.js"],"names":["React","Component","useEffect","AuctionContract","getWeb3","App","state","highestBid","web3","accounts","contract","owner","highestBidder","tempValue","contract_value","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","error","alert","console","submitBid","event","methods","bid","send","from","value","temp","call","temp_value","preventDefault","HighestBidInit","result","HighestBidderInit","ownerInit","contractValueInit","getBalance","BidHandler","target","submitWithdraw","withdraw","render"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n    state = { highestBid: 0, web3: null, accounts: null, contract: null, owner: null, highestBidder: null, tempValue: 0, contract_value: 0};\n\n    componentDidMount = async () => {\n        try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = AuctionContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n            AuctionContract.abi,\n            deployedNetwork && deployedNetwork.address,\n        );\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        this.setState({ web3, accounts, contract: instance });\n        } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n            `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n        }\n    };\n    \n    submitBid = async (event) => {\n        const {highestBid, tempValue, contract, accounts, contract_value} = this.state;\n        \n        await contract.methods.bid().send({from: accounts[0], value: tempValue});\n        const temp = await contract.methods.highestBid.call();\n        this.setState({highestBid: temp});\n        this.state.contract_value += this.state.temp_value;\n        this.setState({contract_value: temp_value});\n        \n        event.preventDefault();\n    }\n    \n    HighestBidInit = async () => {\n        const contract = this.state.contract;\n        const result = await contract.methods.highestBid().call();\n        this.setState({ highestBid: result });\n    };\n    \n    HighestBidderInit = async () => {\n        const contract = this.state.contract;\n        const result = await contract.methods.highestBidder().call();\n        this.setState({ highestBidder: result });\n    };\n    \n    ownerInit = async () => {\n        const contract = this.state.contract;\n        const result = await contract.methods.owner().call();\n        this.setState({ owner: result });\n    };\n    \n    contractValueInit = async () => {\n        const {owner, web3 } = this.state;\n        const value = await web3.eth.getBalance(owner);\n        this.setState({contract_value: value});\n    }\n    \n    BidHandler = (event) => {\n        this.setState({tempValue: event.target.value});\n    }\n    \n    submitWithdraw = async (event) => {\n        const { accounts, contract } = this.state;\n        await contract.methods.withdraw().send({ from: accounts[0] });\n    }\n\n    render() {\n        if (!this.state.web3) {\n        return <div>Loading Web3, accounts, and contract...</div>;\n        }\n        \n        return (\n            <div className=\"App\">\n                <ul className = \"listOfButtons\">\n                    <li>\n                        <button className = \"btn\" onClick = {this.ownerInit}>Owner</button>\n                        <h1>{this.state.owner}</h1>\n                    </li>\n                    <li>\n                        <button className = \"btn\" onClick = {this.HighestBidInit}>Highest Bid</button>\n                        <h1>{this.state.highestBid}</h1>\n                    </li>\n                    <li>\n                        <button className = \"btn\" onClick = {this.HighestBidderInit}>Highest bidder address</button>\n                        <h1>{this.state.highestBidder}</h1>\n                    </li>\n                    <li>\n                        <button className = \"btn\" onClick = {this.contractValueInit}>Contract value</button>\n                        <h1>{this.state.contract_value}</h1>\n                    </li>\n                </ul>\n                \n                <div className=\"Bid\">\n                    <form onSubmit={this.submitBid}>\n                        <input\n                            type='text'\n                            onChange={this.BidHandler}\n                        />\n                        <input className = \"btn\" type='submit' value='BID'/>\n                    </form>\n                </div>\n                \n                <div className=\"withdraw\">\n                    <form onSubmit={this.submitWithdraw}>\n                        <input className = \"btn\"type='submit' value='WITHDRAW'/>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}