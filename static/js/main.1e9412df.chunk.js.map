{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","highestBid","accounts","contract","owner","highestBidder","tempValue","contract_value","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","setState","alert","error","submitBid","event","methods","bid","send","from","value","call","temp","preventDefault","HighestBidInit","result","HighestBidderInit","ownerInit","contractValueInit","getBalance","options","BidHandler","target","submitWithdraw","withdraw","this","className","onClick","onSubmit","type","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e9412df.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component, useEffect } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n    state = { highestBid: 0, web3: null, accounts: null, contract: null, owner: null, highestBidder: null, tempValue: 0, contract_value: 0};\n\n    componentDidMount = async () => {\n        try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = AuctionContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n            AuctionContract.abi,\n            deployedNetwork && deployedNetwork.address,\n        );\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        this.setState({ web3, accounts, contract: instance });\n        } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n            `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n        }\n    };\n    \n    submitBid = async (event) => {\n        const {highestBid, tempValue, contract, accounts, contract_value} = this.state;\n        \n        await contract.methods.bid().send({from: accounts[0], value: tempValue});\n        const temp = await contract.methods.highestBid.call();\n        this.setState({highestBid: temp});\n        event.preventDefault();\n    }\n    \n    HighestBidInit = async () => {\n        const contract = this.state.contract;\n        const result = await contract.methods.highestBid().call();\n        this.setState({ highestBid: result });\n    };\n    \n    HighestBidderInit = async () => {\n        const contract = this.state.contract;\n        const result = await contract.methods.highestBidder().call();\n        this.setState({ highestBidder: result });\n    };\n    \n    ownerInit = async () => {\n        const contract = this.state.contract;\n        const result = await contract.methods.owner().call();\n        this.setState({ owner: result });\n    };\n    \n    contractValueInit = async () => {\n        const {owner, web3, contract } = this.state;\n        const value = await web3.eth.getBalance(contract.options.address);\n        this.setState({contract_value: value});\n    }\n    \n    BidHandler = (event) => {\n        this.setState({tempValue: event.target.value});\n    }\n    \n    submitWithdraw = async (event) => {\n        const { accounts, contract } = this.state;\n        await contract.methods.withdraw().send({ from: accounts[0] });\n    }\n\n    render() {\n        if (!this.state.web3) {\n        return <div>Loading Web3, accounts, and contract...</div>;\n        }\n        \n        return (\n            <div className=\"App\">\n                <div className = \"Header\">\n                    <h9>Smart Contract</h9>\n                </div>\n                <ul className = \"listOfButtons\">\n                    <li>\n                        <button className = \"btn\" onClick = {this.ownerInit}>Owner</button>\n                        <h1>{this.state.owner}</h1>\n                    </li>\n                    <li>\n                        <button className = \"btn\" onClick = {this.HighestBidInit}>Highest Bid</button>\n                        <h1>{this.state.highestBid}</h1>\n                    </li>\n                    <li>\n                        <button className = \"btn\" onClick = {this.HighestBidderInit}>Highest bidder address</button>\n                        <h1>{this.state.highestBidder}</h1>\n                    </li>\n                    <li>\n                        <button className = \"btn\" onClick = {this.contractValueInit}>Contract value</button>\n                        <h1>{this.state.contract_value}</h1>\n                    </li>\n                </ul>\n                \n                <div className=\"Bid\">\n                    <form onSubmit={this.submitBid}>\n                        <input\n                            type='text'\n                            onChange={this.BidHandler}\n                        />\n                        <input className = \"btn\" type='submit' value='BID'/>\n                    </form>\n                </div>\n                \n                <div className=\"withdraw\">\n                    <form onSubmit={this.submitWithdraw}>\n                        <input className = \"btn\"type='submit' value='WITHDRAW'/>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}